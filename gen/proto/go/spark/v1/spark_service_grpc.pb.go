// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: spark/v1/spark_service.proto

package sparkv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SparkServiceClient is the client API for SparkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SparkServiceClient interface {
	// Queue a job
	QueueJob(ctx context.Context, in *QueueJobRequest, opts ...grpc.CallOption) (*QueueJobResponse, error)
	// Get job logs
	GetJobLogs(ctx context.Context, in *GetJobLogsRequest, opts ...grpc.CallOption) (*GetJobLogsResponse, error)
	// Get Job Status
	GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusResponse, error)
	// Ping the server
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type sparkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSparkServiceClient(cc grpc.ClientConnInterface) SparkServiceClient {
	return &sparkServiceClient{cc}
}

func (c *sparkServiceClient) QueueJob(ctx context.Context, in *QueueJobRequest, opts ...grpc.CallOption) (*QueueJobResponse, error) {
	out := new(QueueJobResponse)
	err := c.cc.Invoke(ctx, "/spark.v1.SparkService/QueueJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) GetJobLogs(ctx context.Context, in *GetJobLogsRequest, opts ...grpc.CallOption) (*GetJobLogsResponse, error) {
	out := new(GetJobLogsResponse)
	err := c.cc.Invoke(ctx, "/spark.v1.SparkService/GetJobLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) GetJobStatus(ctx context.Context, in *GetJobStatusRequest, opts ...grpc.CallOption) (*GetJobStatusResponse, error) {
	out := new(GetJobStatusResponse)
	err := c.cc.Invoke(ctx, "/spark.v1.SparkService/GetJobStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sparkServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/spark.v1.SparkService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SparkServiceServer is the server API for SparkService service.
// All implementations should embed UnimplementedSparkServiceServer
// for forward compatibility
type SparkServiceServer interface {
	// Queue a job
	QueueJob(context.Context, *QueueJobRequest) (*QueueJobResponse, error)
	// Get job logs
	GetJobLogs(context.Context, *GetJobLogsRequest) (*GetJobLogsResponse, error)
	// Get Job Status
	GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusResponse, error)
	// Ping the server
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

// UnimplementedSparkServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSparkServiceServer struct {
}

func (UnimplementedSparkServiceServer) QueueJob(context.Context, *QueueJobRequest) (*QueueJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueJob not implemented")
}
func (UnimplementedSparkServiceServer) GetJobLogs(context.Context, *GetJobLogsRequest) (*GetJobLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobLogs not implemented")
}
func (UnimplementedSparkServiceServer) GetJobStatus(context.Context, *GetJobStatusRequest) (*GetJobStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobStatus not implemented")
}
func (UnimplementedSparkServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}

// UnsafeSparkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SparkServiceServer will
// result in compilation errors.
type UnsafeSparkServiceServer interface {
	mustEmbedUnimplementedSparkServiceServer()
}

func RegisterSparkServiceServer(s grpc.ServiceRegistrar, srv SparkServiceServer) {
	s.RegisterService(&SparkService_ServiceDesc, srv)
}

func _SparkService_QueueJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).QueueJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spark.v1.SparkService/QueueJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).QueueJob(ctx, req.(*QueueJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_GetJobLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).GetJobLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spark.v1.SparkService/GetJobLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).GetJobLogs(ctx, req.(*GetJobLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_GetJobStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetJobStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).GetJobStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spark.v1.SparkService/GetJobStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).GetJobStatus(ctx, req.(*GetJobStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SparkService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SparkServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spark.v1.SparkService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SparkServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SparkService_ServiceDesc is the grpc.ServiceDesc for SparkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SparkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spark.v1.SparkService",
	HandlerType: (*SparkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueJob",
			Handler:    _SparkService_QueueJob_Handler,
		},
		{
			MethodName: "GetJobLogs",
			Handler:    _SparkService_GetJobLogs_Handler,
		},
		{
			MethodName: "GetJobStatus",
			Handler:    _SparkService_GetJobStatus_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SparkService_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spark/v1/spark_service.proto",
}
